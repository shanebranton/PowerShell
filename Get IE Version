Clear-Host 

#region Variables

# Get list of computers from AD to query against.
$computers = Get-ADComputer -Filter {Enabled -eq 'true'} -SearchBase 'OU=ExampleComputers,DC=ExampleSub,DC=Example,DC=com'
$sleep = '60' # Sleep timer in seconds. How long to sleep after all jobs have started.
$concurrentJobs = '10' # How many jobs to run concurrently.
$jobTimeout = '20' # Job timeout in seconds.
$hive = 'LocalMachine' # The registry hive we will be querying against.
$key = "SOFTWARE\\Microsoft\\Internet Explorer" # This is the "key" we will be querying. Recommended to use double back slashes as separators. Do not include the value.
$value = "svcVersion" # This is the "value" we want the data from.

#endregion

Write-Output "$(Get-Date)`t`tRetrieved $($computers.count) computers from AD. Starting jobs..."

# Iterate through each computer, attempting to pull registry information.
Foreach($computer in $computers)
{

    # Get running jobs.
    $running = Get-Job -State Running

    # Cleanup running jobs that have been running longer than allowed.
    $now = Get-Date
    Get-Job | Where {$_.State -eq 'Running' -and (($now - $_.PSBeginTime) -gt $jobTimeout)} | Stop-Job

    # Get running jobs again.
    $running = Get-Job -State Running

    # Check if running jobs are more than allowed and wait if not.
    If($running.count -ge $concurrentJobs)
    {
        # Write-output 'Waiting...' # This will cause your console to fill with a lot of "Waiting..." but can be uncommented to see how things are progressing.
        $running | Wait-Job -Any | Out-Null # Wait until any job finishes and suppress output.
    }
        $computer = $computer.DNSHostName # Set the computer variable to only the DNS name, rather than the object from AD.
        
            Start-Job -ArgumentList $computer,$hive,$key,$value -ScriptBlock `
            {
                # Map arguments back to meaningful variable names.
                $computer = $args[0]
                $hive = $args[1]
                $key = $args[2]
                $value = $args[3]

                # Check if computer responds to ping.
                If(-Not(Test-Connection -ComputerName $computer -Count 1 -ErrorAction SilentlyContinue))
                {
                    Write-Output "$computer`tNo Ping"
                    Return # Ends this iteration of the foreach loop.
                }

                # Attempt .NET remote registry. Return value if success.
                Try{
                    $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($hive,$computer)
                    $RegKey= $Reg.OpenSubKey($key)
                    $IEVersion = $RegKey.GetValue($value)

                    "$computer`t$IEVersion"
                # If remote registry is unsuccessful, write out "No Remote Registry". This indicates a firewall or service issue.
                }Catch{
                    Write-Output "$($args[0])`tNo Remote Registry"
                }

            } | Out-Null # Suppress jobs outputting as they are started.
}

# Wait specified time for jobs to finish.
Write-Output "$(Get-Date)`t`tAll jobs started. Sleeping for $sleep seconds..."
Start-Sleep -Seconds $sleep

$timeStamp = Get-Date -Format yyyyMMddhhmm # Get timestamp for use in file name.
"Computer Name`tVersion" | Out-File -FilePath "$PSScriptRoot\IEVersion_$timeStamp.csv" -Append # Write out headers to the CSV.

#region Job Management

$completedJobs = Get-Job -State Completed # Get completed jobs and place in variable for writing to CSV.
Write-Host "$(Get-Date)`t`tWriting jobs out..."

# For each completed job, write the results out to the CSV file.
Foreach($completedJob in $completedJobs)
{
    $completedJob | Receive-Job | Out-File -FilePath "$PSScriptRoot\IEVersion_$timeStamp.csv" -Append 
}
$completedJobs | Remove-Job -Force # Remove completed jobs.

#endregion

Write-Host "$(Get-Date)`t`tCompleted. Check for failed jobs."
